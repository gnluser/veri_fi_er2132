from flask import Flask, render_template, send_from_directory, jsonify, request
import networkx
import json
import tkinter
# from project import *
#from final.Topology import *
#from final.Gen_Flow import *
#from final.Get_C_Matrix import *
#from final.Dev4Func import *
from equipments.network_equipment import *


le=Load_Network_Information()
ne= Network_Equipments()
ne.loading_equipments_list()

#topo=Topology()
#topo.buildTopology()
#A_edge_matrix=topo.get_A_matrix()
#genFLow=Gen_Flow(topo.core_nodes_list,topo.edge_nodes_list,topo.topology)
#genFLow.flowGenrated()
#genFLow.getPairwiseFlow()
#genFLow.sumNodeFLow()
#genFLow.buildCumulativeFlow()
#print(max(genFLow.cumulative_flows))
#B_device_matrix=genFLow.get_B_Matrix()
#getCMatrix=Get_C_Matrix(genFLow.pairwise_sum_flows,genFLow.getAdjList(),genFLow.shortest_paths_list,genFLow.flows_initiated)
#C_Matrix=getCMatrix.get_C_Matrix()
#print(C_Matrix[0].get_no_action())
#func=Dev4Func(genFLow.getAdjList(),C_Matrix,B_device_matrix,topo.topology,genFLow.cumulative_flows,genFLow.flows_initiated)
#print(func.pathMPLS(5,445,1))
#print(func.blockService(5,445,1,2))
#print(func.unblockService(5,445,1,2))
#print(func.chk_new_flow_srvc(1,450,200))
#print(func.chck_bndwdth(1,450,200))


app = Flask(__name__)
app.config['TEMPLATES_AUTO_RELOAD'] = True
# edges=[[0, 2], [0, 4], [0, 5], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11], [0, 12], [0, 14], [0, 15], [1, 2], [1, 3], [1, 6], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 9], [2, 10], [2, 12], [2, 13], [2, 16], [2, 36], [2, 379], [2, 125], [2, 94], [3, 11], [4, 16], [4, 8], [4, 18], [4, 13], [10, 17], [13, 14], [13, 15], [15, 17], [16, 18], [19, 32], [19, 21], [20, 33], [20, 21], [20, 22], [20, 23], [20, 24], [20, 27], [20, 29], [21, 22], [21, 24], [21, 26], [21, 30], [22, 33], [22, 30], [22, 23], [23, 417], [23, 323], [23, 140], [23, 339], [23, 53], [23, 25], [23, 26], [23, 27], [23, 28], [23, 29], [23, 31], [24, 25], [26, 32], [27, 28], [27, 31], [34, 48], [34, 49], [34, 50], [34, 51], [34, 36], [34, 37], [34, 40], [34, 44], [35, 49], [35, 36], [35, 37], [35, 38], [35, 39], [35, 52], [35, 42], [35, 43], [36, 293], [36, 38], [36, 39], [36, 41], [36, 44], [36, 46], [36, 47], [36, 48], [36, 273], [36, 125], [36, 339], [36, 245], [36, 53], [36, 159], [39, 40], [39, 41], [39, 42], [39, 45], [42, 43], [43, 45], [43, 46], [44, 51], [45, 47], [46, 52], [49, 50], [53, 64], [53, 66], [53, 187], [53, 70], [53, 72], [53, 379], [53, 140], [53, 482], [53, 55], [53, 56], [53, 57], [53, 58], [53, 59], [53, 60], [53, 61], [53, 62], [54, 55], [54, 63], [55, 64], [55, 56], [55, 67], [55, 72], [55, 57], [55, 58], [55, 59], [55, 61], [55, 63], [56, 65], [56, 62], [57, 66], [57, 71], [57, 68], [58, 68], [59, 60], [59, 70], [60, 67], [61, 65], [63, 71], [63, 69], [66, 69], [73, 323], [73, 359], [73, 75], [73, 76], [73, 77], [73, 78], [73, 175], [73, 80], [73, 81], [73, 339], [73, 84], [73, 245], [73, 87], [73, 90], [73, 379], [73, 94], [74, 88], [74, 91], [74, 75], [74, 84], [74, 77], [75, 82], [75, 83], [75, 86], [75, 76], [75, 79], [76, 80], [76, 78], [76, 86], [77, 82], [77, 83], [77, 89], [77, 87], [77, 79], [78, 90], [78, 85], [79, 81], [81, 88], [81, 85], [85, 91], [88, 89], [92, 101], [92, 94], [93, 96], [93, 99], [93, 94], [93, 102], [93, 95], [94, 96], [94, 97], [94, 98], [94, 99], [94, 100], [94, 101], [94, 102], [94, 103], [94, 458], [94, 226], [94, 125], [94, 245], [94, 433], [94, 339], [94, 187], [94, 175], [94, 95], [96, 97], [96, 100], [97, 98], [99, 103], [104, 106], [104, 107], [104, 108], [104, 110], [104, 111], [105, 482], [105, 245], [105, 293], [105, 106], [105, 108], [105, 109], [105, 112], [105, 113], [105, 115], [105, 116], [105, 117], [105, 187], [105, 159], [106, 116], [106, 107], [106, 109], [106, 111], [107, 115], [107, 110], [108, 112], [108, 119], [110, 114], [111, 113], [111, 114], [111, 118], [114, 117], [114, 118], [118, 119], [120, 130], [120, 135], [120, 122], [120, 123], [120, 124], [120, 126], [121, 137], [121, 130], [121, 123], [121, 122], [121, 125], [122, 128], [122, 137], [122, 124], [122, 125], [123, 128], [124, 133], [125, 129], [125, 132], [125, 133], [125, 257], [125, 226], [125, 400], [125, 417], [125, 126], [125, 127], [126, 129], [126, 131], [126, 132], [126, 136], [126, 127], [129, 131], [129, 134], [131, 135], [133, 134], [135, 136], [138, 140], [139, 144], [139, 147], [139, 148], [139, 149], [139, 151], [139, 155], [139, 140], [139, 141], [139, 142], [139, 143], [140, 339], [140, 208], [140, 359], [140, 141], [140, 142], [140, 143], [140, 144], [140, 305], [140, 146], [140, 147], [140, 148], [140, 153], [140, 154], [140, 245], [141, 145], [141, 146], [142, 152], [142, 156], [143, 145], [144, 152], [144, 155], [145, 149], [145, 151], [146, 150], [149, 150], [150, 153], [151, 156], [152, 154], [157, 161], [157, 166], [157, 167], [157, 169], [157, 171], [157, 174], [157, 159], [158, 160], [158, 162], [158, 165], [158, 167], [158, 169], [158, 172], [158, 173], [158, 159], [159, 160], [159, 161], [159, 163], [159, 164], [159, 166], [159, 170], [159, 173], [159, 175], [159, 400], [159, 323], [159, 446], [160, 162], [160, 164], [160, 165], [160, 172], [161, 168], [161, 163], [164, 168], [166, 170], [169, 171], [170, 174], [175, 417], [175, 226], [175, 323], [175, 458], [175, 177], [175, 178], [175, 179], [175, 180], [175, 181], [175, 182], [175, 471], [176, 184], [176, 177], [176, 179], [176, 183], [177, 178], [177, 186], [178, 181], [179, 180], [179, 182], [180, 185], [180, 183], [181, 185], [182, 184], [183, 186], [187, 192], [187, 193], [187, 226], [187, 195], [187, 196], [187, 197], [187, 198], [187, 199], [187, 201], [187, 204], [187, 205], [187, 245], [187, 323], [187, 189], [187, 190], [187, 191], [188, 189], [188, 190], [188, 191], [189, 193], [189, 202], [189, 196], [190, 197], [190, 199], [191, 192], [191, 194], [191, 203], [191, 200], [191, 206], [193, 194], [193, 195], [193, 201], [193, 206], [194, 200], [194, 202], [195, 198], [195, 203], [196, 204], [201, 205], [207, 209], [207, 211], [208, 209], [208, 210], [208, 211], [208, 214], [208, 417], [208, 217], [208, 323], [208, 220], [208, 226], [208, 222], [209, 210], [209, 212], [209, 215], [209, 216], [210, 213], [211, 212], [211, 213], [211, 221], [211, 222], [212, 214], [212, 219], [213, 220], [214, 215], [214, 219], [214, 221], [214, 223], [215, 216], [216, 218], [216, 217], [217, 218], [222, 223], [224, 226], [224, 227], [224, 228], [224, 229], [224, 230], [224, 235], [224, 237], [225, 226], [225, 228], [225, 231], [226, 227], [226, 229], [226, 231], [226, 232], [226, 234], [226, 359], [226, 236], [226, 238], [226, 417], [226, 245], [227, 241], [227, 239], [228, 235], [228, 232], [228, 241], [229, 230], [231, 233], [231, 236], [231, 237], [231, 238], [232, 233], [233, 234], [234, 240], [235, 240], [237, 239], [242, 244], [242, 245], [242, 246], [242, 248], [242, 250], [242, 255], [243, 244], [243, 245], [243, 247], [243, 251], [243, 252], [243, 253], [244, 246], [245, 339], [245, 417], [245, 293], [245, 323], [245, 254], [245, 247], [245, 248], [245, 251], [245, 252], [246, 249], [246, 250], [247, 249], [248, 253], [249, 255], [251, 254], [256, 258], [256, 261], [257, 417], [257, 258], [257, 259], [257, 261], [257, 262], [257, 263], [257, 264], [257, 458], [257, 482], [257, 270], [257, 339], [257, 379], [258, 259], [258, 260], [258, 262], [258, 263], [258, 268], [259, 260], [259, 270], [260, 264], [260, 267], [260, 266], [261, 268], [261, 269], [263, 266], [263, 265], [264, 265], [266, 267], [268, 269], [271, 273], [271, 274], [271, 275], [272, 273], [272, 278], [272, 286], [273, 288], [273, 417], [273, 274], [273, 276], [273, 277], [273, 278], [273, 279], [273, 280], [273, 446], [274, 275], [274, 276], [274, 282], [274, 284], [274, 285], [274, 286], [275, 281], [276, 279], [276, 277], [276, 289], [277, 280], [277, 285], [277, 287], [279, 283], [279, 289], [280, 288], [280, 290], [280, 281], [280, 282], [280, 283], [281, 284], [286, 287], [287, 290], [291, 297], [291, 293], [291, 302], [292, 293], [292, 294], [292, 296], [292, 298], [292, 299], [292, 303], [293, 294], [293, 295], [293, 298], [293, 359], [293, 300], [293, 304], [293, 297], [293, 471], [294, 295], [295, 296], [295, 299], [296, 304], [296, 301], [297, 300], [297, 302], [297, 301], [299, 303], [305, 320], [305, 458], [305, 307], [305, 308], [305, 310], [305, 311], [305, 312], [305, 313], [305, 314], [305, 318], [305, 319], [306, 322], [306, 307], [306, 308], [306, 309], [306, 310], [307, 309], [308, 313], [308, 315], [308, 316], [308, 317], [309, 311], [311, 312], [311, 314], [311, 317], [312, 320], [312, 315], [313, 318], [315, 321], [315, 322], [315, 316], [315, 319], [319, 321], [323, 325], [323, 326], [323, 327], [323, 328], [323, 329], [323, 332], [323, 334], [323, 335], [323, 337], [324, 331], [324, 325], [325, 326], [326, 337], [326, 327], [326, 328], [326, 330], [326, 331], [326, 332], [326, 335], [327, 333], [328, 329], [328, 330], [328, 333], [332, 336], [332, 334], [333, 336], [338, 354], [338, 340], [338, 341], [338, 342], [338, 343], [338, 344], [338, 356], [338, 351], [339, 355], [339, 357], [339, 417], [339, 359], [339, 340], [339, 341], [339, 343], [339, 344], [339, 345], [339, 346], [339, 379], [339, 349], [340, 352], [340, 353], [340, 354], [341, 355], [341, 342], [341, 348], [341, 346], [341, 350], [342, 349], [343, 347], [343, 353], [343, 357], [344, 352], [344, 345], [346, 347], [347, 348], [348, 356], [348, 350], [350, 351], [358, 375], [358, 360], [358, 361], [358, 362], [358, 364], [358, 366], [359, 360], [359, 361], [359, 362], [359, 363], [359, 365], [359, 368], [359, 482], [359, 372], [359, 376], [359, 446], [360, 373], [360, 363], [360, 364], [360, 366], [361, 368], [361, 370], [361, 365], [362, 371], [362, 370], [362, 367], [363, 369], [363, 367], [363, 373], [364, 369], [364, 375], [365, 371], [365, 374], [368, 377], [370, 372], [371, 376], [372, 377], [373, 374], [378, 387], [378, 380], [378, 383], [379, 384], [379, 385], [379, 386], [379, 389], [379, 391], [379, 395], [379, 380], [379, 381], [379, 382], [379, 383], [380, 386], [380, 387], [380, 389], [380, 394], [380, 382], [380, 381], [381, 392], [381, 390], [382, 384], [382, 388], [384, 385], [384, 394], [384, 388], [385, 395], [387, 391], [388, 390], [390, 392], [390, 393], [390, 396], [390, 397], [391, 393], [392, 397], [394, 396], [398, 400], [398, 401], [398, 402], [398, 403], [398, 404], [398, 407], [398, 409], [398, 415], [399, 400], [399, 402], [399, 411], [400, 413], [400, 401], [400, 403], [400, 404], [400, 405], [400, 406], [400, 410], [400, 412], [401, 409], [401, 414], [401, 405], [403, 410], [404, 407], [404, 408], [404, 412], [404, 413], [405, 406], [406, 411], [407, 408], [408, 415], [412, 414], [416, 418], [417, 418], [417, 419], [417, 420], [417, 421], [417, 422], [417, 429], [417, 430], [418, 419], [418, 421], [418, 424], [419, 420], [419, 422], [419, 426], [419, 427], [419, 428], [420, 423], [421, 428], [421, 426], [421, 429], [422, 423], [422, 425], [422, 431], [423, 424], [423, 427], [424, 425], [424, 431], [426, 430], [432, 434], [432, 436], [432, 437], [432, 438], [433, 434], [433, 435], [433, 446], [433, 437], [433, 438], [433, 439], [433, 440], [434, 435], [434, 443], [435, 436], [435, 441], [437, 442], [437, 441], [438, 439], [439, 440], [440, 442], [440, 443], [444, 452], [444, 446], [444, 447], [445, 448], [445, 456], [445, 450], [445, 446], [445, 447], [446, 449], [446, 450], [446, 451], [446, 452], [446, 453], [446, 454], [446, 482], [447, 448], [447, 449], [447, 455], [448, 451], [450, 454], [450, 455], [452, 456], [452, 453], [457, 464], [457, 459], [457, 461], [458, 465], [458, 467], [458, 459], [458, 460], [458, 461], [458, 462], [458, 463], [459, 460], [459, 462], [460, 469], [461, 468], [461, 466], [462, 463], [463, 464], [463, 469], [464, 465], [465, 466], [466, 467], [466, 468], [470, 472], [470, 474], [470, 475], [470, 477], [470, 478], [471, 481], [471, 472], [471, 473], [471, 476], [471, 477], [471, 478], [471, 479], [472, 480], [472, 473], [472, 476], [473, 481], [473, 474], [473, 475], [473, 479], [474, 480], [482, 484], [482, 485], [482, 490], [482, 491], [482, 494], [482, 495], [482, 497], [482, 489], [483, 496], [483, 484], [483, 486], [483, 487], [483, 490], [483, 494], [484, 485], [484, 488], [484, 492], [484, 498], [484, 499], [485, 486], [485, 487], [486, 496], [486, 497], [486, 492], [486, 493], [486, 499], [487, 498], [487, 488], [487, 489], [487, 491], [488, 495], [488, 493]]
#edges  = list(topo.topology.edges())
#edges = [list(elem) for elem in edges]
@app.route("/")
def home():
	# return render_template('index.html')
	return render_template('index.html', edges=edges, core_nodes_list=topo.core_nodes_list)
    # return "Hello World!"

'''
@app.route('/static/<path:path>')
def send_static(path):
    return send_from_directory('static', path)

@app.route('/shortest_path/<source>/<destination>')
def shortest_path(source, destination):
    return jsonify(genFLow.shortest_paths_list[int(source)][int(destination)])

@app.route('/flows/<source>/<destination>')
def flows(source, destination):
    return jsonify(genFLow.flows_initiated[int(source)][int(destination)])


@app.route('/check/reachability/<int:source>/<int:destination>/<int:flow>')
def reachability(source, destination, flow):
	# return "True"
	return ( jsonify(func.pathMPLS(source,destination,flow)))

@app.route('/check/bandwidth/<int:source>/<int:destination>/<int:bandwidth>')
def bandwidth(source, destination, bandwidth):
	return(jsonify(func.chck_bndwdth(source,destination,bandwidth)))


@app.route('/check/new_flow/<source>/<destination>/<bandwidth>')
def flow(source, destination, bandwidth):
	return "True"

@app.route('/block/<int:source>/<int:destination>/<int:flow>/<int:device>')
def block(source, destination, flow, device):
	print(source, destination, flow, device)
	return jsonify(func.blockService(source,destination,flow,device))

@app.route('/unblock/<int:source>/<int:destination>/<int:flow>/<int:device>')
def unblock(source, destination, flow, device):
	print(source, destination, flow, device)
	return jsonify(func.unblockService(source,destination,flow,device))
'''

'''
@app.route('/vendor_instance')
def myfunc():
	return jsonify(enumerate(ne.network_equipment_vendor_list))
'''

@app.route('/vendor_names')
def requesting_vendor_names():
	print("reading vendor names")
	print(le.ne.calling_vendor_names())
	return jsonify(le.ne.calling_vendor_names())
'''
@app.route('/equipment_per_vendor')
def requesting_equipment_list():
	print("new func")
'''

@app.route('/vendor_name_response',methods=['POST'])
def vendor_name_response():
	le.vendor_name=request.form['vendor_name']
	print("setting vendor name")
	print(le.vendor_name)
	return le.vendor_name

'''
@app.route('/cards_selection')
def cards_selection():
	le.cards_selection_list
''

@app.route('/properties_selection')
def properties_selection():
	return le.ne.
'''

@app.route("/equipment_name_response",methods=["POST"])
def equipment_name_response():
	data=request.form['data']
	#node_name=request.form['node_name']
	#data=json.load(data)
	print(data,type(data))
	data=json.loads(data)
	print(data['equipment_name'],data['node_name'])
	equipment_name=data['equipment_name']
	node_name=data['node_name']
	vendor_name=data['vendor_name']
	new_equipment_at_node = Equipment()
	if equipment_name not in le.network_deployed_equipment_dict.keys():
		le.network_deployed_equipment_dict[equipment_name]=1#le.ne.vendor_instance.equipment_dict[equipment_name]
	else:
		le.network_deployed_equipment_dict[equipment_name] += 1  # le.ne.vendor_instance.equipment_dict[equipment_name]
	'''
	le.network_deployed_equipment_dict[equipment_name]
	'''
	print("\ndeployed equipments so far", le.network_deployed_equipment_dict.keys(),le.network_deployed_equipment_dict.values())
	new_equipment_at_node.equipment_properties_dict=le.ne.network_equipment_vendor_dict[vendor_name].equipment_dict[equipment_name].equipment_properties_dict

	# adding node name with equipment installed on it in dictionary
	le.network_equipment_dict[node_name]=new_equipment_at_node
	print(new_equipment_at_node.equipment_properties_dict)
	return jsonify(new_equipment_at_node.equipment_properties_dict)


'''
@app.route("/equipment_at_node_properties",methods=['POST','GET'])
def equipment_at_node_properties():
	node_name=''
	if request.method == 'POST':
		node_name=request.form["node_name"]
		return le.network_equipment_dict[node_name]
	else:
		return le.network_equipment_dict[node_name]

	#return 1
	#return le.equipment_name=request.form['equipment_name']
	
'''

@app.route('/equipment_select')#,methods=['GET','POST'])
def requesting_equipment_names():
	'''
	if request.method == 'POST':
		vendor_name=request.form['vendor_name']
		print("reading equipment names")
	else:
	'''
	#le.network_equipment_vendor_dict[vendor_name]
	#print(le.ne.calling_equipment_names)
	print(le.ne.calling_equipment_names(le.vendor_name))
	return jsonify(le.ne.calling_equipment_names(le.vendor_name))